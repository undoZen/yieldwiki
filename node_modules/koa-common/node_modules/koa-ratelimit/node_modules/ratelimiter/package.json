{
  "name": "ratelimiter",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/node-ratelimiter"
  },
  "description": "abstract rate limiter backed by redis",
  "keywords": [
    "rate",
    "ratelimit",
    "limiter",
    "limit"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "redis": "~0.9.0"
  },
  "license": "MIT",
  "readme": "\n# ratelimiter\n\n  Rate limiter for nodejs backed by redis.\n\n## Installation\n\n```\n$ npm install ratelimiter\n```\n\n## Example\n\n Example Connect middleware implementation limiting against a `user._id`:\n\n```js\nvar id = req.user._id;\nvar limit = new Limiter({ id: id, db: db });\nlimit.get(function(err, limit){\n  if (err) return next(err);\n\n  res.set('X-RateLimit-Limit', limit.total);\n  res.set('X-RateLimit-Remaining', limit.remaining);\n  res.set('X-RateLimit-Reset', limit.reset);\n\n  // all good\n  debug('remaining %s/%s %s', limit.remaining, limit.total, id);\n  if (limit.remaining) return next();\n\n  // not good\n  var delta = (limit.reset * 1000) - Date.now() | 0;\n  var after = limit.reset - (Date.now() / 1000) | 0;\n  res.set('Retry-After', after);\n  res.send(429, 'Rate limit exceeded, retry in ' + ms(delta, { long: true }));\n});\n```\n\n## Options\n\n - `id` the identifier to limit against (typically a user id)\n - `db` redis connection instance\n\n# License\n\n  MIT",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/visionmedia/node-ratelimiter/issues"
  },
  "homepage": "https://github.com/visionmedia/node-ratelimiter",
  "_id": "ratelimiter@1.0.0",
  "dist": {
    "shasum": "25d0452d069bb22f3243f830af8d9d3a7de505ef"
  },
  "_from": "ratelimiter@~1.0.0",
  "_resolved": "https://registry.npmjs.org/ratelimiter/-/ratelimiter-1.0.0.tgz"
}
